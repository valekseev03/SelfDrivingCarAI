# -*- coding: utf-8 -*-
"""SelfDrivingCarNoMount.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENUQquoLjxJwkeddjQnzrFywxS8denWE
"""

from keras import Sequential, layers, models
import pandas as pd
from PIL import Image
import numpy as np
import random
from tqdm import tqdm
import time

textData = pd.read_csv("C:/Users/user/AI Class/datadatadata/driving_log.csv")

textData.columns = ['center','left','right','x1','x2','x3','x4']

textData

rawData = textData.to_numpy()
random.shuffle(rawData)

featureLinks = rawData[:,0:3]
labels = rawData[:,3:]

Image.open(featureLinks[0,0]).convert("L").crop((0,60,320,160)).show()

labels3 = labels.reshape(int(len(labels/4)),4)

labels2 = labels3

labels2.shape

featureLinks[0]

image = [[]]

selected = np.empty([0,0])
#for item in tqdm(range(1000)):
#    selected = np.append(selected, random.choice(featureLinks))
#selected = selected.reshape(int(len(selected)/3), 3)
for row in tqdm(range(len(featureLinks[:]))):
    #currentList = []
    #for col in range(3):
        #currentList = np.append(currentList, )
    #image = np.append(image, [[currentList]])
    image = np.append(image, np.asarray(Image.open(featureLinks[row,0]).convert("L").crop((0,60,320,160))))
    if row%100 == 0:
        np.save("labels2val3", labels2) #saves 1d array of images; proper size 333x3x320x160x1
        np.save("imageval3", image) #saves 1d array of images; proper size 333x3x320x160x1
np.save("labels2val4", labels2) #saves 1d array of images; proper size 333x3x320x160x1
np.save("imageval4", image) #saves 1d array of images; proper size 333x3x320x160x1
#print(image)

np.save("labels2val6", labels2) #saves 1d array of images; proper size 333x3x320x160x1
np.save("imageval6", image) #saves 1d array of images; proper size 333x3x320x160x1

np.save("tdata", image) #saves 1d array of images; proper size 333x3x320x160x1

image = np.load("imageval3.npy")
labels2 = np.load("labels2val3.npy")

resimage = np.resize(image, (int(len(image)/(320*100)),100,320,1))

image2 = resimage[:1004]

featureLinks

image2.shape

plt.imshow(resimage[0])

selected

random.choice(featureLinks).reshape(1000,4)

Image.open('C:\\Users\\user\\AI Class\\SmallRealTrainingData\\IMG\\center_2019_06_24_11_03_07_622.jpg').convert("L").resize((120, 60), resample=Image.BILINEAR)

ai = Sequential()

ai.add(layers.Conv2D(500, kernel_size=(3,3), input_shape=(100,320,1)))
ai.add(layers.MaxPooling2D((2,2)))
ai.add(layers.Conv2D(500, kernel_size=(3,3)))
ai.add(layers.MaxPooling2D((2,2)))
ai.add(layers.Conv2D(300, kernel_size=(3,3)))
ai.add(layers.MaxPooling2D((2,2)))
ai.add(layers.Conv2D(200, kernel_size=(3,3)))
ai.add(layers.MaxPooling2D((2,2)))
ai.add(layers.Conv2D(150, kernel_size=(3,3)))
ai.add(layers.MaxPooling2D((2,2)))
ai.add(layers.Flatten())
ai.add(layers.Dropout(0.5))
ai.add(layers.Dense(200, activation='linear')) #c
ai.add(layers.Dropout(0.5))
ai.add(layers.Dense(100, activation='linear')) #c
ai.add(layers.Dropout(0.5))
ai.add(layers.Dense(50, activation='linear')) #c
ai.add(layers.Dropout(0.5))
ai.add(layers.Dense(20, activation='linear')) #c
ai.add(layers.Dropout(0.5))
ai.add(layers.Dense(4, activation='linear')) #c

ai.compile(optimizer='adam',
                loss='mean_squared_error',
                metrics=['accuracy'])

ai.fit(image2,labels2,epochs=3,batch_size=5)

ai.save("drivingModel")

import matplotlib.pyplot as plt
plt.imshow(image2[0,:,:,0])

